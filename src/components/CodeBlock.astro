---
import fs from 'fs';
import path from 'path'
import fm from 'front-matter';
import { joinToProjectRoot } from "../utilities";

import { Code } from 'astro/components';

type Tab = {
  bash?: string;
  copyable?: boolean;
  filename: string;
  code: string;
  language: string;
  class: string;
}

type Props = {
  tabs: Array<Tab | string>;
};


function readTab(tab: Tab | string): { class: string, filename: string, code: string, language: string, copyable: boolean } {
  if (typeof tab === "string") {
    const filepath = joinToProjectRoot('src/snippets', tab)
    const src = fs.readFileSync(filepath, "utf-8");
    const ext = path.extname(tab).replace(".", "");

    if (fm.test(src)) {
      type Attributes = { class?: string, filename?: string, language?: string, bash?: string, copyable?: boolean }
      const { attributes, body } = fm(src);
      return {
        class: attributes.class ?? "",
        bash: attributes.bash,
        filename: attributes.filename,
        code: body,
        language: attributes.language ?? ext,
        copyable: attributes.copyable ?? false
      };
    }

    return { filename: path.basename(tab), code: src, language: ext, copyable: false, class: "" }
  } else {
    if (!tab.filename || !tab.code || !tab.language) {
      throw new Error("Missing filename, code, or language");
    }

    return {
      class: tab.class ?? "",
      filename: tab.filename,
      code: tab.code,
      language: tab.language,
      copyable: tab.copyable ?? false
    };
  }
}

const { tabs } = Astro.props;
---

<div class="code-tabs-container">
  <div
    class="scrollbar-hidden flex max-w-full flex-row divide-x divide-slate-700 overflow-x-scroll rounded-t-lg border-b border-slate-700 bg-slate-800"
  >
    {
      tabs.map((tab) => (
        <div data-filename={readTab(tab).filename} class:list={["code-tabs-container__tab", { "no-underline": tabs.length === 1}]}>
          {readTab(tab).filename}
        </div>
      ))
    }
  </div>
  <div>
    {
      tabs.map((tab) => {
        const { class: cls, copyable, bash, filename, code, language } = readTab(tab);
        return (
          <div class="code-tabs-container__code-container" data-filename={filename}>
            {bash && (
              <div>
                  <Code lang="bash" code={`$ ${bash.trim()}`} class="border border-b" />
                  <div class="flex flex-row gap-2 items-center !my-0 !py-0 bg-slate-800">
                    <hr class="border-slate-700 my-0 w-8 flex-shrink-0" />
                    <p class="my-0 text-slate-600 text-xs font-mono">Output</p>
                      <hr class="border-slate-700 my-0 w-12 grow" />
                  </div>
              </div>
            )}
            <div class:list={[cls, { "code-rounded-b-lg": true } ]}>
              {!bash && copyable && (
                <button data-code-copy-button data-code-copy-content={code} class="code-tabs-container__copy-button">
                    Copy
                </button>
              )}
              <Code lang={language} code={code.trim()} />
            </div>
          </div>
        )
      })
    }
  </div>
</div>

<style is:global>
  .code-tabs-container {
    @apply my-8 flex flex-col;

    &__copy-button {
      @apply absolute right-3 top-3 rounded border border-slate-600 bg-slate-800/20 px-2 py-1 text-xs font-medium text-white backdrop-blur-sm;
      @apply transition hover:border-slate-500 hover:bg-slate-700/20 hover:underline;
      @apply shadow-inner active:bg-slate-800;
    }

    &__code-container {
      @apply relative;

      &--hidden {
        @apply hidden;
      }

      .code-rounded-b-lg {
        pre.astro-code {
          @apply !rounded-b-lg;
        }
      }

      pre.astro-code {
        @apply !my-0 !rounded-t-none !rounded-b-none;
      }
    }

    &__tab {
      @apply whitespace-nowrap p-1 p-3 font-mono text-xs text-slate-300;
      @apply hover:cursor-pointer;

      &--selected {
        @apply bg-slate-700/30 text-slate-100 underline shadow;
      }
    }
  }
</style>

<script>
  document.querySelectorAll(".code-tabs-container").forEach((container) => {
    const tabs = container.querySelectorAll(".code-tabs-container__tab");

    function selectTab(name: string): void {
      tabs.forEach((tab) => {
        if (tab.dataset.filename !== name) {
          tab.classList.remove("code-tabs-container__tab--selected");
        } else {
          tab.classList.add("code-tabs-container__tab--selected");
        }
      });

      container.querySelectorAll(".code-tabs-container__code-container").forEach((codeContainer) => {
        if (codeContainer.dataset.filename !== name) {
          codeContainer.classList.add("code-tabs-container__code-container--hidden");
        } else {
          codeContainer.classList.remove("code-tabs-container__code-container--hidden");
        }
      });
    }

    tabs.forEach((element) => {
      element.addEventListener("click", () => {
        const filename = element.dataset.filename;
        selectTab(filename);
      });
    });

    selectTab(tabs[0].dataset.filename);

    const copyButtons = document.querySelectorAll("[data-code-copy-button]");
    copyButtons.forEach((b) => {
      b.addEventListener("click", () => {
        try {
          const code = b.dataset.codeCopyContent;
          navigator.clipboard.writeText(code.trim());
          b.innerText = "Copied!";
          setTimeout(() => {
            b.innerText = "Copy";
          }, 2000);
        } catch (e) {
          console.error(e);
        }
      });
    });
  });
</script>
