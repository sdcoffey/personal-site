---
import { Code } from "astro/components";

type Props = {
  tabs: Array<{ filename: string; language: string; code: string; class?: string }>;
};

const { tabs } = Astro.props;
---

<div class="code-tabs-container">
  <div
    class="scrollbar-hidden flex max-w-full flex-row divide-x divide-slate-700 overflow-x-scroll rounded-t-lg border-b border-slate-700 bg-slate-800"
  >
    {
      tabs.map((tab) => (
        <div data-filename={tab.filename} class="code-tabs-container__tab">
          {tab.filename}
        </div>
      ))
    }
  </div>
  <div>
    {
      tabs.map((tab) => (
        <div class:list={["code-tabs-container__code-container", tab.class]} data-filename={tab.filename}>
          <button data-code-copy-button data-code-copy-content={tab.code} class="code-tabs-container__copy-button">
            Copy
          </button>
          <Code lang={tab.language} code={tab.code.trim()} />
        </div>
      ))
    }
  </div>
</div>

<style is:global>
  .code-tabs-container {
    @apply my-8 flex flex-col;

    &__copy-button {
      @apply absolute right-3 top-3 rounded border border-slate-600 bg-slate-800/20 px-2 py-1 text-xs font-medium text-white backdrop-blur-sm;
      @apply transition hover:cursor-pointer hover:border-slate-500 hover:bg-slate-700/20 hover:underline;
      @apply shadow-inner active:bg-slate-800;
    }

    &__code-container {
      @apply relative;

      &--hidden {
        @apply hidden;
      }

      pre.astro-code {
        @apply !my-0 !rounded-t-none;
      }
    }

    &__tab {
      @apply whitespace-nowrap p-1 p-3 font-mono text-xs text-slate-300;

      &--selected {
        @apply bg-slate-700/30 text-slate-100 underline shadow;
      }
    }
  }
</style>

<script>
  document.querySelectorAll(".code-tabs-container").forEach((container) => {
    const tabs = container.querySelectorAll(".code-tabs-container__tab");

    function selectTab(name: string): void {
      tabs.forEach((tab) => {
        if (tab.dataset.filename !== name) {
          tab.classList.remove("code-tabs-container__tab--selected");
        } else {
          tab.classList.add("code-tabs-container__tab--selected");
        }
      });

      container.querySelectorAll(".code-tabs-container__code-container").forEach((codeContainer) => {
        if (codeContainer.dataset.filename !== name) {
          codeContainer.classList.add("code-tabs-container__code-container--hidden");
        } else {
          codeContainer.classList.remove("code-tabs-container__code-container--hidden");
        }
      });
    }

    tabs.forEach((element) => {
      element.addEventListener("click", () => {
        const filename = element.dataset.filename;
        selectTab(filename);
      });
    });

    selectTab(tabs[0].dataset.filename);

    const copyButtons = document.querySelectorAll("[data-code-copy-button]");
    copyButtons.forEach((b) => {
      b.addEventListener("click", () => {
        try {
          const code = b.dataset.codeCopyContent;
          navigator.clipboard.writeText(code.trim());
          b.innerText = "Copied!";
          setTimeout(() => {
            b.innerText = "Copy";
          }, 2000);
        } catch (e) {
          console.error(e);
        }
      });
    });
  });
</script>
