---
import { Image, getImage } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { GetImageResult } from "astro";

import { Footnotes, Howler, FormattedDate } from "../components";
import MainLayout from "../layouts/MainLayout.astro";

type Props = CollectionEntry<"blog">["data"] & {
  headings: CollectionEntry<"blog">["headings"];
  showHowler?: boolean;
};

const { title, description, pubDate, heroImage, heroImageCaption, headings, showHowler = true } = Astro.props;
const filteredHeaders = headings.filter(({ depth }) => depth < 4);

let metaImg: GetImageResult | undefined = undefined;
if (heroImage) {
  metaImg = await getImage({ src: heroImage, format: "webp", height: 800, width: 1200 });
}
---

<MainLayout title={title} docTitle={title} docDescription={description} showNav={true} image={metaImg?.src}>
  <article class="padded-container article prose mx-auto prose-pre:rounded-sm prose-pre:bg-slate-200 prose-pre:p-1">
    <h1 class="page-title mb-2">{title}</h1>
    {description && <h4>{description}</h4>}

    {pubDate && <FormattedDate date={pubDate} class="text-sm" />}
    {
      heroImage && (
        <figure class="my-12">
          <Image
            class="no-padding max-h-[400px] object-cover shadow-sm md:rounded-lg lg:max-h-[300px] lg:rounded-lg"
            src={heroImage}
            alt={description}
            width={1200}
            height={1200}
            format="webp"
          />
          {heroImageCaption && (
            <figcaption class="text-center text-sm text-slate-500">
              <Fragment set:html={heroImageCaption} />
            </figcaption>
          )}
        </figure>
      )
    }
    {!heroImage && <hr />}
    <div class="article-content">
      <slot />
      {showHowler && <Howler />}
      <Footnotes />
    </div>

    {
      filteredHeaders.length > 0 && (
        <div class="not-prose fixed right-0 top-12 hidden w-auto min-w-[12rem] max-w-[18rem] flex-col justify-start xl:flex">
          <h5 class="text-xl font-medium">In this post</h5>
          <ul class="mt-2">
            {filteredHeaders.map(({ depth, slug, text }) => (
              <li
                data-toc-pointer={slug}
                class:list={["toc-element flex h-6 items-center pr-4", { "ps-4": depth === 2, "ps-8": depth === 3 }]}
              >
                <a href={`#${slug}`} class="line-clamp-1 text-xs">
                  {text}
                </a>
              </li>
            ))}
          </ul>
        </div>
      )
    }
  </article>
</MainLayout>

<script>
  const observer = new IntersectionObserver((entries) => {
    const firstIntersecter = entries.filter((entry) => entry.isIntersecting).at(0);

    if (!firstIntersecter) return;
    document
      .querySelector(`.toc-element[data-toc-pointer="${firstIntersecter.target.id}"]`)
      ?.classList.add("toc-element--intersection");

    document.querySelectorAll(".toc-element").forEach((el) => {
      if (el.dataset.tocPointer !== firstIntersecter.target.id) {
        el.classList.remove("toc-element--intersection");
      }
    });
  });
  document.querySelectorAll("h2[id],h3[id]").forEach((el) => observer.observe(el));
</script>

<style is:global>
  .toc-element {
    @apply relative;

    &--intersection,
    &:hover {
      @apply bg-blue-100 text-blue-800 underline transition;

      &:before {
        @apply !bg-blue-600;
      }
    }

    &:before {
      @apply absolute inset-y-0 left-0 h-full w-0.5 bg-slate-300 transition;
      content: " ";
    }
  }
</style>
