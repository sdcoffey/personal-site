---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { FormattedDate } from "../components";

import MainLayout from "../layouts/MainLayout.astro";

type Props = CollectionEntry<"blog">["data"] & {
  headings: CollectionEntry<"blog">["headings"];
};

const { title, description, pubDate, heroImage, headings } = Astro.props;
const filteredHeaders = headings.filter(({ depth }) => depth < 4);
---

<MainLayout title={title} docTitle={title} docDescription={description} showNav={true}>
  <article class="padded-container article prose mx-auto prose-pre:rounded-sm prose-pre:bg-slate-200 prose-pre:p-1">
    <h1 class="page-title mb-2">{title}</h1>
    <h4>{description}</h4>

    <FormattedDate date={pubDate} class="text-sm" />
    {
      heroImage && (
        <Image
          class="no-padding my-12 max-h-[400px] object-cover shadow-sm md:rounded-lg lg:max-h-[300px] lg:rounded-lg"
          src={heroImage}
          alt={description}
          width={1200}
          height={1200}
          format="webp"
        />
      )
    }
    {!heroImage && <hr />}
    <div class="article-content">
      <slot />
    </div>

    <div class="not-prose fixed right-0 top-12 hidden w-auto max-w-[20rem] flex-col justify-start xl:flex">
      <h5 class="text-xl font-medium">In this post</h5>
      <ul class="mt-2">
        {
          filteredHeaders.map(({ depth, slug, text }) => (
            <li
              data-toc-pointer={slug}
              class:list={["toc-element flex h-6 items-center pr-4", { "ps-4": depth === 2, "ps-8": depth === 3 }]}
            >
              <a href={`#${slug}`} class="line-clamp-1 text-xs">
                {text}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </article>
</MainLayout>

<script>
  const observer = new IntersectionObserver((entries) => {
    const firstIntersecter = entries.filter((entry) => entry.isIntersecting).at(0);

    if (!firstIntersecter) return;
    document
      .querySelector(`.toc-element[data-toc-pointer="${firstIntersecter.target.id}"]`)
      ?.classList.add("toc-element--intersection");

    document.querySelectorAll(".toc-element").forEach((el) => {
      if (el.dataset.tocPointer !== firstIntersecter.target.id) {
        el.classList.remove("toc-element--intersection");
      }
    });
  });
  document.querySelectorAll("h2[id],h3[id]").forEach((el) => observer.observe(el));
</script>

<style is:global>
  .toc-element {
    @apply relative;

    &--intersection,
    &:hover {
      @apply bg-emerald-100 text-emerald-700 underline transition;

      &:before {
        @apply !bg-emerald-400;
      }
    }

    &:before {
      @apply absolute inset-y-0 left-0 h-full w-0.5 bg-slate-300 transition;
      content: " ";
    }
  }

  .article-content {
    .astro-code {
      @apply !my-6 !rounded-lg !bg-slate-800 !p-4;
    }

    details {
      @apply rounded-lg border border-slate-300 bg-slate-100 p-4 text-sm shadow-sm;

      p:last-child {
        @apply mb-0;
      }
      summary {
        @apply text-base font-semibold text-slate-700 hover:cursor-pointer;
      }
    }

    ol,
    ul {
      li {
        @apply m-0;
      }
    }

    #in-this-post + ul {
      @apply flex list-none flex-col gap-2 pl-0;

      ul {
        @apply m-0 list-none;
      }

      a,
      p {
        @apply m-0 text-sm font-normal leading-tight;
      }

      li {
        @apply m-0 p-0;
      }

      ul {
        @apply flex flex-col gap-0;
      }
    }
  }
</style>
